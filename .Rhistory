blogdown::new_site(theme = 'gcushen/hugo-academic')
pip3 install -U academic
rm(list = ls())
setwd('/Users/alexandradecker/Dropbox/Projects/sustainedAttention/Scripts_and_Data_R/')
source("https://raw.githubusercontent.com/hauselin/Rcode/master/summaryh.R")
source("https://raw.githubusercontent.com/hauselin/Rcode/master/detectOutliers.R")
source("https://raw.githubusercontent.com/hauselin/Rcode/master/summaryh.R")
source("https://raw.githubusercontent.com/hauselin/Rcode/master/se.R")
source("/Users/alexandradecker/Dropbox/Personal/summaryBetas.R")
library(roll); library(broom); library(lme4); library(lmerTest); library(data.table);
library(dplyr); library(data.table); library(ggplot2); library(dtplyr); library(tidyr);library(reshape2); library(ggbeeswarm); library(tidyverse); library(tibble); library(optimx); library(Hmisc); library(DescTools);library('lm.beta')
#save.image("sustained_attention_manuscript.RData")
load("sustained_attention_manuscript.RData")
encoding[group == "Adults" & outlier, unique(participant)]
sd_nMinusOne_to_n <- function(x, n) {
var1 <- x^2
sumsquares1 <- var1 * (n-1)
return(sqrt(sumsquares1 / n))
}
ggtheme2 = theme(plot.caption = element_text(hjust = -.2),
panel.border = element_blank(), panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_rect(fill = "white", colour = NA),
axis.line.x = element_line(size = 1, linetype = "solid", colour = "black"),
axis.line.y = element_line(size = 1, linetype = "solid", colour = "black"),
axis.text.x = element_text(size = 17, colour = 'black'),
axis.text.y = element_text(size = 17, colour = 'black'),
plot.title = element_text(size = 16, hjust = 0.5),
text = element_text(size = 16), panel.spacing.x = unit(1, "lines"),
legend.key = element_blank(), legend.key.height = unit(2, 'line'),
legend.position="none")
ggtheme = theme(plot.caption = element_text(hjust = -.2),
panel.border = element_blank(), panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_rect(fill = "white", colour = NA),
axis.line.x = element_line(size = 1, linetype = "solid", colour = "black"),
axis.line.y = element_line(size = 1, linetype = "solid", colour = "black"),
axis.text.x = element_text(size = 16, colour = 'black'),
axis.text.y = element_text(size = 16, colour = 'black'),
plot.title = element_text(size = 16, hjust = 0.5),
text = element_text(size = 16), panel.spacing.x = unit(1, "lines"),
legend.key = element_blank(), legend.key.height = unit(2, 'line'))
ggtheme_noxlabel = theme(plot.caption = element_text(hjust = -.2),
panel.border = element_blank(), panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_rect(fill = "white", colour = NA),
axis.line.x = element_line(size = 1, linetype = "solid", colour = "black"),
axis.line.y = element_line(size = 1, linetype = "solid", colour = "black"),
axis.text.x=element_blank(),
axis.text.y = element_text(size = 16, colour = 'black'),
plot.title = element_text(size = 16, hjust = 0.5),
text = element_text(size = 16), panel.spacing.x = unit(1, "lines"),
legend.key = element_blank(), legend.key.height = unit(2, 'line'))
ggkidtheme  = scale_color_manual(breaks = c("Adults", "Kids"), values = c("darkolivegreen4", "mediumorchid"))
rm(list = ls())
setwd('/Users/alexandradecker/Dropbox/Projects/sustainedAttention/Scripts_and_Data_R/')
source("https://raw.githubusercontent.com/hauselin/Rcode/master/summaryh.R")
source("https://raw.githubusercontent.com/hauselin/Rcode/master/detectOutliers.R")
source("https://raw.githubusercontent.com/hauselin/Rcode/master/summaryh.R")
source("https://raw.githubusercontent.com/hauselin/Rcode/master/se.R")
source("/Users/alexandradecker/Dropbox/Personal/summaryBetas.R")
library(roll); library(broom); library(lme4); library(lmerTest); library(data.table);
library(dplyr); library(data.table); library(ggplot2); library(dtplyr); library(tidyr);library(reshape2); library(ggbeeswarm); library(tidyverse); library(tibble); library(optimx); library(Hmisc); library(DescTools);library('lm.beta')
#save.image("study1.RData")
load("study1.RData")
encoding[sample1==1, unique(participant)]
encoding
encoding$sample2
encoding[participant %in% c(16,  17,  20, 100, 102, 103, 104, 105, 106,  108 , 110,  111,  112 , 113,  114,  115,     116, 117, 118, 120, 121, 122, 123, 124 ,126, 127, 128, 129, 130, 132, 135, 137, 139 ,140,
141, 142, 143 ,144, 146 ,147, 150, 151, 152, 153 ,154 ,155,156 ,157, 159, 160, 162, 163, 166, 168, 169, 170, 171 ,172 ,173, 184), sample1 := 1]
encoding[sample1==1, unique(participant)]
encoding[sample1==1, n_distinct(participant)]
encoding$prox_correct_infreq
encoding$prox_correct_mismatch
encoding[, .(participant, trialNo, classifyEnc, prox_correct_infreq, prox_correct_mismatch)]
encoding[, .(participant, trialNo, classifyEnc, prox_correct_infreq, prox_correct_mismatch)]%>%print(n=100)
post_correct_infreq_slowing = lmer(rtResidual ~ prox_correct_infreq + (prox_correct_infreq|participant), data= encoding[sample1==1 & !is.na(prox_correct_infreq) & is.na(prox_correct_mismatch)],control = lmerControl(optimizer ="Nelder_Mead"))
summaryh(post_correct_infreq_slowing)
encoding$prox_correct_infreq = relevel(x = as.factor(encoding$prox_correct_infreq), ref = "before")
post_correct_infreq_slowing2 = lmer(rtResidual ~ prox_correct_infreq + (prox_correct_infreq|participant), data= encoding[sample1==1 & !is.na(prox_correct_infreq) & is.na(prox_correct_mismatch)],control = lmerControl(optimizer ="Nelder_Mead"))
summaryh(post_correct_infreq_slowing)
summaryh(post_any_error_memoryb)
encoding$prox_any_error_plot_before = relevel(x = as.factor(encoding$prox_any_error_plot_before), ref = "before")
summaryh(post_any_error_memoryb)
post_any_error_memoryb = glmer(memoryHits ~ prox_any_error + (prox_any_error|participant), data= encoding[sample2==1 & !is.na(prox_any_error) & is.na(prox_any_error_mismatch) & prox_any_error_plot != "pre 1"], family = "binomial",control=glmerControl(optimizer="bobyqa",optCtrl=list(maxfun=2e5)))
summaryh(post_any_error_memoryb)
post_any_error_memoryb = glmer(memoryHits ~ prox_any_error + (prox_any_error|participant), data= encoding[sample1==1 & !is.na(prox_any_error) & is.na(prox_any_error_mismatch) & prox_any_error_plot != "pre 1"], family = "binomial",control=glmerControl(optimizer="bobyqa",optCtrl=list(maxfun=2e5)))
summaryh(post_any_error_memoryb)
encoding$prox_any_error = relevel(x = as.factor(encoding$prox_any_error), ref = "correct nonliving")
post_any_error_memory2 = glmer(memoryHits ~ prox_any_error_plot_before + (prox_any_error_plot_before|participant), data= encoding[ group == "Adults" & !is.na(prox_any_error_plot_before) & is.na(prox_any_error_mismatch) & !outlier == "yes"], family = "binomial",control=glmerControl(optimizer="bobyqa",optCtrl=list(maxfun=2e5)))
post_any_error_memory2= glmer(memoryHits ~ prox_any_error + (prox_any_error|participant), data= encoding[ group == "Adults" & !is.na(prox_any_error) & is.na(prox_any_error_mismatch) & !outlier == "yes" & prox_any_error_plot != "pre 1"], family = "binomial",control=glmerControl(optimizer="bobyqa",optCtrl=list(maxfun=2e5)))
summaryh(post_any_error_memory2)
summaryh(post_any_error_memory)
post_any_error_memory = glmer(memoryHits ~ prox_any_error + (prox_any_error|participant), data= encoding[sample1==1 & !is.na(prox_any_error) & is.na(prox_any_error_mismatch)  & prox_any_error_plot != "pre 1"], family = "binomial",control=glmerControl(optimizer="bobyqa",optCtrl=list(maxfun=2e5)))
summaryh(post_any_error_memory)
summaryh(post_any_error_memory)
summaryh(post_any_error_memoryb)
summaryh(post_any_error_memory2)
post_any_error_memory2= glmer(memoryHits ~ prox_any_error + (prox_any_error|participant), data= encoding[ !is.na(prox_any_error) & is.na(prox_any_error_mismatch) & sample1== 1 & prox_any_error_plot != "pre 1"], family = "binomial",control=glmerControl(optimizer="bobyqa",optCtrl=list(maxfun=2e5)))
summaryh(post_any_error_memoryb)
summaryh(post_any_error_memory2)
encoding[, unique(prox_any_error)]
encoding[, .(prox_any_error, prox_any_error_mismatch)]
encoding[is.na(prox_any_error_mismatch) & outlier == "no" & group == "Adults", n_distinct(participant)]
pre_minus_post_memory  = encoding[is.na(prox_any_error_mismatch) & outlier == "no" & group == "Adults", .(memoryhits = mean(memoryHits, na.rm=T)), by =
.(participant, prox_any_error)]
#pre minus post error memory decrement
pre_minus_post_memory_wide = spread(pre_minus_post_memory, prox_any_error, memoryhits)
pre_minus_post_memory_wide[, memory_decrement := before - `post 1`]
pre_minus_post_memory_wide[, c(mean(before), mean(`post 1`))]
pre_minus_post_memory_wide%>%print(n=Inf)
ggplot(pre_minus_post_memory_wide, aes(memory_decrement, error)) +
ggtheme +
labs(x = "Post-error memory decrement", y = "Memory for error trial (mean)") +
geom_point(color = "deepskyblue4") +
stat_smooth(formula = y ~ x, method = "lm", color = "black")
ggsave("error_trial_memory_decrement_study1.png", width = 5, height = 4)
memory_hits_for_error[, error_memory_diff := memory_hits_error - memory_hits_weighted]
cor.test(memory_hits_for_error$error_memory_diff, memory_hits_for_error$memory_decrement)
memory_hits_for_error[, error_memory_diffRO := outliersZ(error_memory_diff, zCutOff = 3)]
memory_hits_for_error[, memory_decrementRO := outliersZ(memory_decrement, zCutOff = 3)]
cor.test(memory_hits_for_error$error_memory_diffRO, memory_hits_for_error$memory_decrementRO)
cor.test(memory_hits_for_error$error_memory_diffRO, memory_hits_for_error$memory_decrementRO)
memory_hits_for_error[, .(memory_hits_error, memory_hits_weighted, error_memory_diffRO, memory_decrementRO)]
memory_hits_for_error$
t.test(x, mu = 0)
x = memory_hits_for_error[!is.na(memory_decrementRO)]$memory_decrementRO
summaryh(t.test(post3_slowing.beta$Beta, mu = 0))
summaryh(t.test(x, mu = 0))
shapiro.test(memory_hits_for_error$memory_decrement)
summaryh(cor.test(memory_hits_for_error$memory_decrementRO, memory_hits_for_error$error_memory_diff))
ggplot(memory_hits_for_error, aes(error_memory_diff, memory_decrementRO)) +
ggtheme +
labs(x = "Post-error memory decrement", y = "Memory for error trial (adjusted)") +
geom_point(color = "deepskyblue4") +
stat_smooth(formula = y ~ x, method = "lm", color = "black") +
coord_cartesian(xlim = c(-0.5, 0.25))
ggsave("error_trial_memory_decrement_study1.png", width = 4, height = 4)
rt_error_trial  = encoding[is.na(prox_any_error_mismatch) & outlier == "no" & group == "Adults" & prox_any_error == "error", .(error_rt = mean(rtResidual, na.rm=T)), by =
.(participant)]
rt_error_trial  = encoding[is.na(prox_any_error_mismatch) & sample1==1 & prox_any_error == "error", .(error_rt = mean(rtResidual, na.rm=T)), by =
.(participant)]
#pre minus post error memory decrement
#error response time does not correlate with memory decrement
rt_error_memory_decrement = left_join(rt_error_trial, pre_minus_post_memory_wide[, c(1, 2, 3, 6, 7, 8)])
rt_error_memory_decrement[, cor.test(error_rt, memory_decrement)]
rt_error_memory_decrement[, cor.test(error_rt, `post 1`)]
rt_error_memory_decrement[, cor.test(error_rt, before )]
post_slowing_df  = encoding[is.na(prox_any_error_mismatch) & sample1==1 & prox_any_error %in% c("post 1", "before"), .(rt = mean(rtResidual, na.rm=T)), by =
.(participant, prox_any_error)]
post_slowing_df_wide = spread(post_slowing_df, prox_any_error, rt)
post_slowing_df_wide[, post_slowing := `post 1` - before]
post_slowing_post_memory_decrement = left_join(post_slowing_df_wide[, c(1,4)], rt_error_memory_decrement[, c(1, 2, 7)])
summaryh(post_slowing_post_memory_decrement[, cor.test(memory_decrement, post_slowing)])
#calculate slowing on infrequent error trials
post_slowing_infrequent_errors_df  = encoding[is.na(prox_error_infreq_mismatch) & sample1==1& prox_error_infreq %in% c("post 1", "before"), .(rt = mean(rtResidual, na.rm=T)), by =
.(participant, prox_error_infreq)]
post_slowing_error_infreq_df_wide = spread(post_slowing_infrequent_errors_df, prox_error_infreq, rt)
post_slowing_error_infreq_df_wide[, post_slowing := `post 1` - before]
#calculate memory decrement on infrequent error trials
memory_decrement_infrequent  = encoding[is.na(prox_error_infreq_mismatch) & outlier == "no" & group == "Adults" & prox_error_infreq %in% c("post 1", "before"), .(memoryhits = mean(memoryHits, na.rm=T)), by =
.(participant, prox_error_infreq)]
memory_decrement_infrequent_wide = spread(memory_decrement_infrequent, prox_error_infreq, memoryhits)
memory_decrement_infrequent_wide[, infrequent_error_memory_decrement := before-`post 1`]
infreq_error_post_slowing = left_join(memory_decrement_infrequent_wide[, c(1,4)], post_slowing_error_infreq_df_wide[, c(1, 4)])
infreq_error_post_slowing[, cor.test(infrequent_error_memory_decrement, post_slowing)]
save.image("study1.RData")
blogdown:::serve_site()
hugo new --kind publication publication/<Smaller-hippocampal-subfield-volumes-predict-verbal-associative-memory-in-pediatric-brain-tumor-survivors->
hugo new --kind publication publication/<Smaller-hippocampal-subfield-volumes-predict-verbal-associative-memory-in-pediatric-brain-tumor-survivors>
pwd
ls
pwd
ls
blogdown:::serve_site()
data.table(words = "1/ = petunia")
library(data.table)
data.table(words = "1/ = petunia")
data = data.table(words = "1/ = petunia")
data
strsplit(data, " ")
strsplit(data, " ")
strsplit(data$words, " ")
data
data = data.table(words = "1/ = petunia", second = "NA")
data = data.table(words = "1/ = petunia", second = NA)
data
strsplit(data$words, " ")
x <- "Split the words in a sentence."
strsplit(x, " ")
x <- "Split the words in a sentence."
strsplit(x, " ")
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
pwd
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
git add -A
