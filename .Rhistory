load("study1.RData")
encoding[sample1==1, unique(participant)]
encoding
encoding$sample2
encoding[participant %in% c(16,  17,  20, 100, 102, 103, 104, 105, 106,  108 , 110,  111,  112 , 113,  114,  115,     116, 117, 118, 120, 121, 122, 123, 124 ,126, 127, 128, 129, 130, 132, 135, 137, 139 ,140,
141, 142, 143 ,144, 146 ,147, 150, 151, 152, 153 ,154 ,155,156 ,157, 159, 160, 162, 163, 166, 168, 169, 170, 171 ,172 ,173, 184), sample1 := 1]
encoding[sample1==1, unique(participant)]
encoding[sample1==1, n_distinct(participant)]
encoding$prox_correct_infreq
encoding$prox_correct_mismatch
encoding[, .(participant, trialNo, classifyEnc, prox_correct_infreq, prox_correct_mismatch)]
encoding[, .(participant, trialNo, classifyEnc, prox_correct_infreq, prox_correct_mismatch)]%>%print(n=100)
post_correct_infreq_slowing = lmer(rtResidual ~ prox_correct_infreq + (prox_correct_infreq|participant), data= encoding[sample1==1 & !is.na(prox_correct_infreq) & is.na(prox_correct_mismatch)],control = lmerControl(optimizer ="Nelder_Mead"))
summaryh(post_correct_infreq_slowing)
encoding$prox_correct_infreq = relevel(x = as.factor(encoding$prox_correct_infreq), ref = "before")
post_correct_infreq_slowing2 = lmer(rtResidual ~ prox_correct_infreq + (prox_correct_infreq|participant), data= encoding[sample1==1 & !is.na(prox_correct_infreq) & is.na(prox_correct_mismatch)],control = lmerControl(optimizer ="Nelder_Mead"))
summaryh(post_correct_infreq_slowing)
summaryh(post_any_error_memoryb)
encoding$prox_any_error_plot_before = relevel(x = as.factor(encoding$prox_any_error_plot_before), ref = "before")
summaryh(post_any_error_memoryb)
post_any_error_memoryb = glmer(memoryHits ~ prox_any_error + (prox_any_error|participant), data= encoding[sample2==1 & !is.na(prox_any_error) & is.na(prox_any_error_mismatch) & prox_any_error_plot != "pre 1"], family = "binomial",control=glmerControl(optimizer="bobyqa",optCtrl=list(maxfun=2e5)))
summaryh(post_any_error_memoryb)
post_any_error_memoryb = glmer(memoryHits ~ prox_any_error + (prox_any_error|participant), data= encoding[sample1==1 & !is.na(prox_any_error) & is.na(prox_any_error_mismatch) & prox_any_error_plot != "pre 1"], family = "binomial",control=glmerControl(optimizer="bobyqa",optCtrl=list(maxfun=2e5)))
summaryh(post_any_error_memoryb)
encoding$prox_any_error = relevel(x = as.factor(encoding$prox_any_error), ref = "correct nonliving")
post_any_error_memory2 = glmer(memoryHits ~ prox_any_error_plot_before + (prox_any_error_plot_before|participant), data= encoding[ group == "Adults" & !is.na(prox_any_error_plot_before) & is.na(prox_any_error_mismatch) & !outlier == "yes"], family = "binomial",control=glmerControl(optimizer="bobyqa",optCtrl=list(maxfun=2e5)))
post_any_error_memory2= glmer(memoryHits ~ prox_any_error + (prox_any_error|participant), data= encoding[ group == "Adults" & !is.na(prox_any_error) & is.na(prox_any_error_mismatch) & !outlier == "yes" & prox_any_error_plot != "pre 1"], family = "binomial",control=glmerControl(optimizer="bobyqa",optCtrl=list(maxfun=2e5)))
summaryh(post_any_error_memory2)
summaryh(post_any_error_memory)
post_any_error_memory = glmer(memoryHits ~ prox_any_error + (prox_any_error|participant), data= encoding[sample1==1 & !is.na(prox_any_error) & is.na(prox_any_error_mismatch)  & prox_any_error_plot != "pre 1"], family = "binomial",control=glmerControl(optimizer="bobyqa",optCtrl=list(maxfun=2e5)))
summaryh(post_any_error_memory)
summaryh(post_any_error_memory)
summaryh(post_any_error_memoryb)
summaryh(post_any_error_memory2)
post_any_error_memory2= glmer(memoryHits ~ prox_any_error + (prox_any_error|participant), data= encoding[ !is.na(prox_any_error) & is.na(prox_any_error_mismatch) & sample1== 1 & prox_any_error_plot != "pre 1"], family = "binomial",control=glmerControl(optimizer="bobyqa",optCtrl=list(maxfun=2e5)))
summaryh(post_any_error_memoryb)
summaryh(post_any_error_memory2)
encoding[, unique(prox_any_error)]
encoding[, .(prox_any_error, prox_any_error_mismatch)]
encoding[is.na(prox_any_error_mismatch) & outlier == "no" & group == "Adults", n_distinct(participant)]
pre_minus_post_memory  = encoding[is.na(prox_any_error_mismatch) & outlier == "no" & group == "Adults", .(memoryhits = mean(memoryHits, na.rm=T)), by =
.(participant, prox_any_error)]
#pre minus post error memory decrement
pre_minus_post_memory_wide = spread(pre_minus_post_memory, prox_any_error, memoryhits)
pre_minus_post_memory_wide[, memory_decrement := before - `post 1`]
pre_minus_post_memory_wide[, c(mean(before), mean(`post 1`))]
pre_minus_post_memory_wide%>%print(n=Inf)
ggplot(pre_minus_post_memory_wide, aes(memory_decrement, error)) +
ggtheme +
labs(x = "Post-error memory decrement", y = "Memory for error trial (mean)") +
geom_point(color = "deepskyblue4") +
stat_smooth(formula = y ~ x, method = "lm", color = "black")
ggsave("error_trial_memory_decrement_study1.png", width = 5, height = 4)
memory_hits_for_error[, error_memory_diff := memory_hits_error - memory_hits_weighted]
cor.test(memory_hits_for_error$error_memory_diff, memory_hits_for_error$memory_decrement)
memory_hits_for_error[, error_memory_diffRO := outliersZ(error_memory_diff, zCutOff = 3)]
memory_hits_for_error[, memory_decrementRO := outliersZ(memory_decrement, zCutOff = 3)]
cor.test(memory_hits_for_error$error_memory_diffRO, memory_hits_for_error$memory_decrementRO)
cor.test(memory_hits_for_error$error_memory_diffRO, memory_hits_for_error$memory_decrementRO)
memory_hits_for_error[, .(memory_hits_error, memory_hits_weighted, error_memory_diffRO, memory_decrementRO)]
memory_hits_for_error$
t.test(x, mu = 0)
x = memory_hits_for_error[!is.na(memory_decrementRO)]$memory_decrementRO
summaryh(t.test(post3_slowing.beta$Beta, mu = 0))
summaryh(t.test(x, mu = 0))
shapiro.test(memory_hits_for_error$memory_decrement)
summaryh(cor.test(memory_hits_for_error$memory_decrementRO, memory_hits_for_error$error_memory_diff))
ggplot(memory_hits_for_error, aes(error_memory_diff, memory_decrementRO)) +
ggtheme +
labs(x = "Post-error memory decrement", y = "Memory for error trial (adjusted)") +
geom_point(color = "deepskyblue4") +
stat_smooth(formula = y ~ x, method = "lm", color = "black") +
coord_cartesian(xlim = c(-0.5, 0.25))
ggsave("error_trial_memory_decrement_study1.png", width = 4, height = 4)
rt_error_trial  = encoding[is.na(prox_any_error_mismatch) & outlier == "no" & group == "Adults" & prox_any_error == "error", .(error_rt = mean(rtResidual, na.rm=T)), by =
.(participant)]
rt_error_trial  = encoding[is.na(prox_any_error_mismatch) & sample1==1 & prox_any_error == "error", .(error_rt = mean(rtResidual, na.rm=T)), by =
.(participant)]
#pre minus post error memory decrement
#error response time does not correlate with memory decrement
rt_error_memory_decrement = left_join(rt_error_trial, pre_minus_post_memory_wide[, c(1, 2, 3, 6, 7, 8)])
rt_error_memory_decrement[, cor.test(error_rt, memory_decrement)]
rt_error_memory_decrement[, cor.test(error_rt, `post 1`)]
rt_error_memory_decrement[, cor.test(error_rt, before )]
post_slowing_df  = encoding[is.na(prox_any_error_mismatch) & sample1==1 & prox_any_error %in% c("post 1", "before"), .(rt = mean(rtResidual, na.rm=T)), by =
.(participant, prox_any_error)]
post_slowing_df_wide = spread(post_slowing_df, prox_any_error, rt)
post_slowing_df_wide[, post_slowing := `post 1` - before]
post_slowing_post_memory_decrement = left_join(post_slowing_df_wide[, c(1,4)], rt_error_memory_decrement[, c(1, 2, 7)])
summaryh(post_slowing_post_memory_decrement[, cor.test(memory_decrement, post_slowing)])
#calculate slowing on infrequent error trials
post_slowing_infrequent_errors_df  = encoding[is.na(prox_error_infreq_mismatch) & sample1==1& prox_error_infreq %in% c("post 1", "before"), .(rt = mean(rtResidual, na.rm=T)), by =
.(participant, prox_error_infreq)]
post_slowing_error_infreq_df_wide = spread(post_slowing_infrequent_errors_df, prox_error_infreq, rt)
post_slowing_error_infreq_df_wide[, post_slowing := `post 1` - before]
#calculate memory decrement on infrequent error trials
memory_decrement_infrequent  = encoding[is.na(prox_error_infreq_mismatch) & outlier == "no" & group == "Adults" & prox_error_infreq %in% c("post 1", "before"), .(memoryhits = mean(memoryHits, na.rm=T)), by =
.(participant, prox_error_infreq)]
memory_decrement_infrequent_wide = spread(memory_decrement_infrequent, prox_error_infreq, memoryhits)
memory_decrement_infrequent_wide[, infrequent_error_memory_decrement := before-`post 1`]
infreq_error_post_slowing = left_join(memory_decrement_infrequent_wide[, c(1,4)], post_slowing_error_infreq_df_wide[, c(1, 4)])
infreq_error_post_slowing[, cor.test(infrequent_error_memory_decrement, post_slowing)]
save.image("study1.RData")
blogdown:::serve_site()
hugo new --kind publication publication/<Smaller-hippocampal-subfield-volumes-predict-verbal-associative-memory-in-pediatric-brain-tumor-survivors->
hugo new --kind publication publication/<Smaller-hippocampal-subfield-volumes-predict-verbal-associative-memory-in-pediatric-brain-tumor-survivors>
pwd
ls
pwd
ls
blogdown:::serve_site()
data.table(words = "1/ = petunia")
library(data.table)
data.table(words = "1/ = petunia")
data = data.table(words = "1/ = petunia")
data
strsplit(data, " ")
strsplit(data, " ")
strsplit(data$words, " ")
data
data = data.table(words = "1/ = petunia", second = "NA")
data = data.table(words = "1/ = petunia", second = NA)
data
strsplit(data$words, " ")
x <- "Split the words in a sentence."
strsplit(x, " ")
x <- "Split the words in a sentence."
strsplit(x, " ")
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
pwd
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
git add -A
install.packages('blogdown')
blogdown::install_hugo()
blogdown:::serve_site()
blogdown::serve_site()
git add -A
blogdown:::serve_site()
git commit -m "added pubs"
blogdown:::serve_site()
git add -A
git add -A
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
setwd("/Users/alexandradecker/Dropbox/Projects_postdoc/INSIDE_SES/gambling/data_clean/")
setwd("/Users/alexandradecker/Dropbox/Projects_postdoc/INSIDE_SES/gambling/data_clean/")
rm(list = ls())
library(data.table); library(tidyverse)
dat <- fread("task_data_clean_toshare.csv")
setDT(dat) # convert your data to a datatable - this is necessary for running the code below
# mov_avg2 is a column reflecting the amount of reward on each trial
dat[trial_card == "even", mov_avg2 := 0]
dat[trial_card == "lose", mov_avg2 := -.5]
dat[trial_card == "win", mov_avg2 := 1]
# Compute a starting value
starting_value_mov <- dat[, mean(mov_avg2), by = Subject][, mean(V1)] # Here, mov_av2 is just the reward received on each trial (0, -0.5, or 1); so I used the starting value as the mean of these just so the starting point wasn't biased one way or another
starting_value_mov
starting_value_mov
starting_value_mov
getwd()
setwd("/Users/alexandradecker/Downloads/")
dat <- fread("encoding.csv")
names(dat)
dat[, unique(stimulus)]
as.data.table(stimuli = dat[, unique(stimulus)])
stim <- as.data.table(x = dat[, unique(stimulus)])
stim
stim[, order(V1)]
fwrite("stimulus_compare.csv", x = stim)
getwd()
fread("for_natasha.csv")
dat <- fread("for_natasha.csv")
dat$Natasha_list <- as.character(dat$Natasha_list)
dat$on_OSF <- as.character(dat$on_OSF)
Natasha_list
dat$Natasha_list
dat$on_OSF
dat <- fread("for_natasha.csv")
dat[!on_OSF %in% Natasha_list, on_OSF]
dat[!on_OSF %in% Natasha_list, Natasha_list]
# remove the last three characters from the on_OSF column:
dat$on_OSF <- substr(dat$on_OSF, 1, nchar(dat$on_OSF)-3)
dat$on_OSF
# remove the last three characters from the on_OSF column:
dat$on_OSF <- substr(dat$on_OSF, 1, nchar(dat$on_OSF)-1)
dat$on_OSF
dat$Natasha_list <- substr(dat$Natasha_list, 1, nchar(dat$Natasha_list)-4)
dat
dat[!on_OSF %in% Natasha_list, Natasha_list]
getwd()
dat <- fread("for_natasha.csv")
# identify words in the Natasha_list column that are NOT in the on_OSF column:
dat[!on_OSF %in% Natasha_list, on_OSF]
dat[!on_OSF %in% Natasha_list, Natasha_list]
# remove the last three characters from the on_OSF column:
dat$on_OSF2 <- substr(dat$on_OSF, 1, nchar(dat$on_OSF)-4)
dat$Natasha_list2 <- substr(dat$Natasha_list, 1, nchar(dat$Natasha_list)-4)
# compare lists:
dat[!on_OSF %in% Natasha_list, on_OSF]
dat[!on_OSF %in% Natasha_list, Natasha_list]
dat[!on_OSF2 %in% Natasha_list2, Natasha_list2]
dat[!on_OSF2 %in% Natasha_list2, .(Natasha_list, Natasha_list2)]
dat[!on_OSF %in% Natasha_list, .(Natasha_list)]
dat[!on_OSF %in% Natasha_list, .(Natasha_list)][1:40]
dat[!on_OSF2 %in% Natasha_list2, .(Natasha_list2)][1:40]
dat[!on_OSF2 %in% Natasha_list2, .(Natasha_list, Natasha_list2)][1:40]
getwd()
dat <- fread("for_natasha.csv")
dat[!on_OSF %in% Natasha_list, on_OSF]
dat[!on_OSF %in% Natasha_list, Natasha_list]
getwd()
dat <- fread("for_natasha.csv")
dat
getwd()
dat <- fread("for_natasha.csv")
dat
dat <- fread("for_natasha.csv")
dat[!on_OSF %in% Natasha_list, on_OSF]
dat
getwd()
dat <- fread("for_natasha.csv")
dat
dat
getwd()
dat <- fread("for_natasha.csv")
dat
dat[!on_OSF %in% Natasha_list, on_OSF]
getwd()
dat <- fread("for_natasha.csv2")
getwd()
dat <- fread("for_natasha2.csv")
dat
dat <- fread("for_natasha3.csv")
dat
dat
getwd()
dat <- fread("for_natasha3.csv")
dat[!on_OSF %in% Natasha_list, on_OSF]
dat[!on_OSF %in% Natasha_list, Natasha_list]
getwd()
dat <- fread("for_natasha3.csv")
dat
getwd()
to_compare <- fread("encoding.csv")
to_compare[, unique(stimulus)]
list <- as.data.table(x = to_compare[, unique(stimulus)])
list
list[, Natasha_list := V1]
list
list$V1 <- NULL
list
getwd()
dat <- fread("for_natasha3.csv")
dat
getwd()
dat <- fread("for_natasha2.csv")
dat
# stimuli in experiment:
to_compare <- fread("encoding.csv")
to_compare[, unique(stimulus)]
natasha_list <- to_compare[, unique(stimulus)]
dat <- fread("for_natasha2.csv")
dat
osf <- fread("for_natasha2.csv")
osf_list <- fread("for_natasha2.csv")
merge(osf_list, natasha_list)
natasha_list
natasha_list <- as.data.table(x = to_compare[, unique(stimulus)])
osf_list <- fread("for_natasha2.csv")
merge(osf_list, natasha_list)
osf_list
natasha_list
osf_list
natasha_list
osf_list
osf_list[, stimuli := OSF]
natasha_list
natasha_list[, stimuli := V1]
# print the values in natasha_list$stimuli that are not in osf_list$stimuli:
natasha_list[!stimuli %in% osf_list$stimuli, stimuli]
fwrite("natasha_list.csv", x = natasha_list)
getwd()
# stimuli in experiment:
osf_list <- fread("for_natasha2.csv")
# stimuli in experiment:
dat <- fread("for_natasha2.csv")
getwd()
# stimuli in experiment:
dat <- fread("for_natasha2.csv")
# identify words in the Natasha_list column that are NOT in the on_OSF column:
dat[!on_OSF %in% Natasha_list, on_OSF]
dat
# identify words in the Natasha_list column that are NOT in the on_OSF column:
dat[!OSF %in% Natasha_list, on_OSF]
# identify words in the Natasha_list column that are NOT in the on_OSF column:
dat[!OSF %in% Natasha_list, OSF]
# identify words in the Natasha_list column that are NOT in the on_OSF column:
dat[!OSF %in% Natasha_list, OSF]
dat[!OSF %in% Natasha_list, Natasha_list]
# identify words in the Natasha_list column that are NOT in the on_OSF column:
dat[!OSF %in% Natasha_list, OSF]
dat[!OSF %in% Natasha_list, .(Natasha_list)]
dat[!OSF %in% Natasha_list, (Natasha_list]
# remove the last three characters from the on_OSF column:
dat$on_OSF2 <- substr(dat$OSF, 1, nchar(dat$OSF)-4)
dat$Natasha_list2 <- substr(dat$Natasha_list, 1, nchar(dat$Natasha_list)-4)
# compare lists:
dat[!on_OSF2 %in% Natasha_list2, on_OSF2]
dat[!on_OSF2 %in% Natasha_list2, .(Natasha_list, Natasha_list2)]
dat[!on_OSF2 %in% Natasha_list2, .(Natasha_list, Natasha_list2)][1:40]
dat[!on_OSF2 %in% Natasha_list2, Natasha_list2]
dat[!on_OSF2 %in% Natasha_list2, .(Natasha_list, Natasha_list2)]
dat
dat[]
dat[, order(OSF)]
dat[!on_OSF2 %in% Natasha_list2, .(Natasha_list, Natasha_list2)]
to_add <- dat[!on_OSF2 %in% Natasha_list2, .(Natasha_list, Natasha_list2)]
to_add
arrange(to_add$Natasha_list)
arange(to_add$Natasha_list)
order(to_add$Natasha_list)
# put the values in to_add in alphabetical order:
to_add <- to_add[order(Natasha_list),]
to_add
# stimuli in experiment:
rm(list = ls())
dat <- fread("for_natasha2.csv")
# identify words in the Natasha_list column that are NOT in the on_OSF column:
dat[!OSF %in% Natasha_list, OSF]
dat[!OSF %in% Natasha_list, (Natasha_list]
# remove the last three characters from the on_OSF column:
dat$on_OSF2 <- substr(dat$OSF, 1, nchar(dat$OSF)-4)
dat$Natasha_list2 <- substr(dat$Natasha_list, 1, nchar(dat$Natasha_list)-4)
# compare lists:
dat[!on_OSF2 %in% Natasha_list2, on_OSF2]
dat[!on_OSF2 %in% Natasha_list2, Natasha_list2]
to_add <- dat[!on_OSF2 %in% Natasha_list2, .(Natasha_list, Natasha_list2)]
# stimuli in experiment:
rm(list = ls())
dat <- fread("for_natasha2.csv")
# identify words in the Natasha_list column that are NOT in the on_OSF column:
dat[!OSF %in% Natasha_list, OSF]
dat[!OSF %in% Natasha_list, (Natasha_list]
# remove the last three characters from the on_OSF column:
dat$on_OSF2 <- substr(dat$OSF, 1, nchar(dat$OSF)-4)
# stimuli in experiment:
rm(list = ls())
dat <- fread("for_natasha2.csv")
dat
# identify words in the Natasha_list column that are NOT in the on_OSF column:
dat[!OSF %in% Natasha_list, OSF]
dat[!OSF %in% Natasha_list, (Natasha_list)]
# remove the last three characters from the on_OSF column:
dat$on_OSF2 <- substr(dat$OSF, 1, nchar(dat$OSF)-4)
dat$Natasha_list2 <- substr(dat$Natasha_list, 1, nchar(dat$Natasha_list)-4)
# compare lists:
dat[!on_OSF2 %in% Natasha_list2, on_OSF2]
dat[!on_OSF2 %in% Natasha_list2, Natasha_list2]
to_add <- dat[!on_OSF2 %in% Natasha_list2, .(Natasha_list, Natasha_list2)]
# put the values in to_add in alphabetical order:
to_add <- to_add[order(Natasha_list),]
to_add
dat[!on_OSF2 %in% Natasha_list2, .(Natasha_list, Natasha_list2, OSF)]
dat[!on_OSF2 %in% Natasha_list2, .(Natasha_list, Natasha_list2)]
dat
# print images that are in dat$Natasha_list but not in dat$OSF:
dat[!on_OSF2 %in% Natasha_list2, .(Natasha_list, Natasha_list2)]
# print images that are in dat$Natasha_list but not in dat$OSF:
missing <- dat[!on_OSF2 %in% Natasha_list2, .(Natasha_list, Natasha_list2)]
# order missing alphabetically:
missing <- missing[order(Natasha_list),]
missing
# stimuli in experiment:
rm(list = ls())
dat <- fread("for_natasha2.csv")
# identify words in the Natasha_list column that are NOT in the on_OSF column:
dat[!OSF %in% Natasha_list, OSF]
# remove the last three characters from the on_OSF column:
dat$on_OSF2 <- substr(dat$OSF, 1, nchar(dat$OSF)-4)
dat$Natasha_list2 <- substr(dat$Natasha_list, 1, nchar(dat$Natasha_list)-4)
# compare lists:
dat[!on_OSF2 %in% Natasha_list2, on_OSF2]
dat[!on_OSF2 %in% Natasha_list2, Natasha_list2]
dat[!on_OSF2 %in% Natasha_list2, .(Natasha_list, Natasha_list2)]
# print images that are in dat$Natasha_list but not in dat$OSF:
missing <- dat[!on_OSF2 %in% Natasha_list2, .(Natasha_list, Natasha_list2)]
# print images that are in dat$Natasha_list but not in dat$OSF:
missing <- dat[!on_OSF %in% Natasha_list, .(Natasha_list, Natasha_list2)]
# print images that are in dat$Natasha_list but not in dat$OSF:
missing <- dat[!OSF %in% Natasha_list, .(Natasha_list, Natasha_list2)]
missing
missing <- dat[!OSF %in% Natasha_list, .(Natasha_list, Natasha_list2)]
missing
getwd()
setwd("/Users/alexandradecker/Downloads/")
fread("for_natasha.csv")
library(data.table)
dat <- fread("for_natasha.csv")
dat
# remove the last 4 characterize of the dat$on_OSF column:
dat$on_OSF <- substr(dat$on_OSF, 1, nchar(dat$on_OSF)-4)
dat$Natasha_list <- substr(dat$Natasha_list, 1, nchar(dat$Natasha_list)-4)
dat$Natasha_list
# compare stimuli that are in the Natasha list but not in on_OSF:
setdiff(dat$Natasha_list, dat$on_OSF)
dat[!on_OSF %in% Natasha_list,]
natasha_list <- dat$Natasha_list
on_OSF <- dat$on_OSF
not_on_OSF <- natasha_list[!(natasha_list %in% on_OSF)]
not_on_OSF
not_on_OSF
library(data.table)
getwd()
setwd("/Users/alexandradecker/Downloads/")
dat <- fread("for_natasha.csv")
# remove the last 4 characterize of the dat$on_OSF column:
dat$on_OSF <- substr(dat$on_OSF, 1, nchar(dat$on_OSF)-4)
dat$Natasha_list <- substr(dat$Natasha_list, 1, nchar(dat$Natasha_list)-4)
length(dat$on_OSF)
natasha_list <- dat$Natasha_list
on_OSF <- dat$on_OSF
not_on_OSF <- natasha_list[!(natasha_list %in% on_OSF)]
not_on_OSF
library(data.table)
getwd()
list1 <- fread("list1.csv")
list2 <- fread("list2.csv")
left_join(list1, list2, by = "Name")
library(data.table); library(tidyverse)
left_join(list1, list2, by = "Name")
list2
left_join(list1, list2[, .(Name, `gender (m/f)`, `ethnicity (white, black, asian)`, `age (younger, older)`, `too famous?`)], by = "Name")
left_join(list1, list2[, .(Name, `too famous?`)
left_join(list1, list2[, .(Name, `too famous?`)])
list2[, .(Name, `too famous?`)]
left_join(list1, list2[, .(Name, `too famous?`)])
list2[, .N, by = Name]
list2[, .N, by = Name][N>1]
library(data.table); library(tidyverse)
getwd()
list1 <- fread("list1.csv")
list2 <- fread("list2.csv")
list2[, .N, by = Name][N>1]
list2[Name]
rm(list = ls())
getwd()
list1 <- fread("list1.csv")
list2 <- fread("list2.csv")
list2[, .N, by = Name][N>1]
library(data.table); library(tidyverse)
rm(list = ls())
getwd()
list1 <- fread("list1.csv")
list2 <- fread("list2.csv")
list2[, .N, by = Name][N>1]
list2[Name]
left_join(list1, list2[, .(Name, `too famous?`)])
save_new_df <- left_join(list1, list2[, .(Name, `too famous?`)])
save_new_df
save_new_df <- left_join(list1, list2[, .(Name, `gender (m/f)`, `ethnicity (white, black, asian)`, `age (younger, older)`,`too famous?`)])
save_new_df
fwrite(x = save_new_df, file = "save_new_df.csv")
